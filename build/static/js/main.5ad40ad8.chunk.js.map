{"version":3,"sources":["components/LinkCard.js","components/LinkList.js","components/LinkForm.js","App.js","serviceWorker.js","index.js"],"names":["LinkCard","link","refreshLinks","archiveLink","a","archived","fetch","method","body","JSON","stringify","console","error","deleteLink","id","_id","className","name","href","url","description","onClick","LinkList","links","filter","map","key","LinkForm","useState","setName","setUrl","setDescription","handleSubmit","e","preventDefault","onSubmit","htmlFor","type","value","onChange","target","App","setLinks","loadLinks","res","json","useEffect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5ad40ad8.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function LinkCard({ link, refreshLinks }) {\n    const archiveLink = async () => {\n        link.archived = true;\n        try {\n            await fetch('/.netlify/functions/updateLink', {\n                method: 'PUT',\n                body: JSON.stringify(link),\n            });\n            refreshLinks();\n        } catch (error) {\n            console.error('AHHH', error);\n        }\n    };\n\n    const deleteLink = async () => {\n        const id = link._id;\n        try {\n            await fetch('/.netlify/functions/deleteLink', {\n                method: 'DELETE',\n                body: JSON.stringify({ id }),\n            });\n            refreshLinks();\n        } catch (error) {\n            console.error('AHHH', error);\n        }\n    };\n    return (\n        <div className=\"card mb-3\">\n            <div className=\"card-header\">{link.name}</div>\n            <div className=\"card-body\">\n                <a href={link.url}>{link.url}</a>\n                <p>{link.description}</p>\n            </div>\n            <div className=\"card-footer\">\n                <button className=\"btn btn-warning mr-2\" onClick={archiveLink}>\n                    Archive\n                </button>\n                <button className=\"btn btn-danger\" onClick={deleteLink}>\n                    Delete\n                </button>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport LinkCard from './LinkCard';\nexport default function LinkList({ links, refreshLinks }) {\n    return (\n        <div>\n            <h2 className=\"my-4\">Links</h2>\n            {links &&\n                links\n                    .filter((link) => !link.archived)\n                    .map((link) => (\n                        <LinkCard\n                            key={link._id}\n                            link={link}\n                            refreshLinks={refreshLinks}\n                        />\n                    ))}\n            <h2 className=\"my-4\">Archived</h2>\n            {links &&\n                links\n                    .filter((link) => link.archived)\n                    .map((link) => (\n                        <LinkCard\n                            key={link._id}\n                            link={link}\n                            refreshLinks={refreshLinks}\n                        />\n                    ))}\n        </div>\n    );\n}\n","import React, { useState } from 'react';\n\nexport default function LinkForm({ refreshLinks }) {\n    const [name, setName] = useState('');\n    const [url, setUrl] = useState('');\n    const [description, setDescription] = useState('');\n\n    const resetForm = () => {\n        setName('');\n        setDescription('');\n        setUrl('');\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        const body = { name, url, description };\n        try {\n            const res = await fetch('/.netlify/functions/createLink', {\n                method: 'POST',\n                body: JSON.stringify(body),\n            });\n            resetForm();\n            refreshLinks();\n        } catch (error) {\n            console.error(error);\n        }\n    };\n    return (\n        <div className=\"card\">\n            <div className=\"card-header\">Add Link</div>\n            <div className=\"card-body\">\n                <form onSubmit={handleSubmit}>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"name\">Name</label>\n                        <input\n                            type=\"text\"\n                            name=\"name\"\n                            className=\"form-control\"\n                            value={name}\n                            onChange={(e) => setName(e.target.value)}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"url\">URL</label>\n                        <input\n                            type=\"text\"\n                            name=\"url\"\n                            className=\"form-control\"\n                            value={url}\n                            onChange={(e) => setUrl(e.target.value)}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"description\">Description</label>\n                        <textarea\n                            name=\"description\"\n                            className=\"form-control\"\n                            value={description}\n                            onChange={(e) => setDescription(e.target.value)}\n                        />\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-primary\">\n                        Submit\n                    </button>\n                </form>\n            </div>\n        </div>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\nimport LinkList from \"./components/LinkList\";\nimport LinkForm from \"./components/LinkForm\";\n//Grab all of the links\n//display all of the links\n//add delete and archive functionality\nfunction App() {\n  const [links, setLinks] = useState([]);\n  const loadLinks = async () => {\n    try {\n      const res = await fetch(\"/.netlify/functions/getLinks\"); \n      const links = await res.json();\n      setLinks(links);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    loadLinks();\n  }, []);\n\n  return (\n    <div className=\"container py-5\">\n      <h1 className=\"text-center mb-5\">List O' Link</h1>\n      <LinkForm refreshLinks={loadLinks} />\n      <LinkList links={links} refreshLinks={loadLinks} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}